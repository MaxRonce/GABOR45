{
  "version": 3,
  "sources": ["../../../../node_modules/@ionic/core/components/hardware-back-button.js"],
  "sourcesContent": ["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * When hardwareBackButton: false in config,\n * we need to make sure we also block the default\n * webview behavior. If we don't then it will be\n * possible for users to navigate backward while\n * an overlay is still open. Additionally, it will\n * give the appearance that the hardwareBackButton\n * config is not working as the page transition\n * will still happen.\n */\nconst blockHardwareBackButton = () => {\n    document.addEventListener('backbutton', () => { }); // eslint-disable-line\n};\nconst startHardwareBackButton = () => {\n    const doc = document;\n    let busy = false;\n    doc.addEventListener('backbutton', () => {\n        if (busy) {\n            return;\n        }\n        let index = 0;\n        let handlers = [];\n        const ev = new CustomEvent('ionBackButton', {\n            bubbles: false,\n            detail: {\n                register(priority, handler) {\n                    handlers.push({ priority, handler, id: index++ });\n                },\n            },\n        });\n        doc.dispatchEvent(ev);\n        const executeAction = async (handlerRegister) => {\n            try {\n                if (handlerRegister === null || handlerRegister === void 0 ? void 0 : handlerRegister.handler) {\n                    const result = handlerRegister.handler(processHandlers);\n                    if (result != null) {\n                        await result;\n                    }\n                }\n            }\n            catch (e) {\n                console.error(e);\n            }\n        };\n        const processHandlers = () => {\n            if (handlers.length > 0) {\n                let selectedHandler = {\n                    priority: Number.MIN_SAFE_INTEGER,\n                    handler: () => undefined,\n                    id: -1,\n                };\n                handlers.forEach((handler) => {\n                    if (handler.priority >= selectedHandler.priority) {\n                        selectedHandler = handler;\n                    }\n                });\n                busy = true;\n                handlers = handlers.filter((handler) => handler.id !== selectedHandler.id);\n                executeAction(selectedHandler).then(() => (busy = false));\n            }\n        };\n        processHandlers();\n    });\n};\nconst OVERLAY_BACK_BUTTON_PRIORITY = 100;\nconst MENU_BACK_BUTTON_PRIORITY = 99; // 1 less than overlay priority since menu is displayed behind overlays\n\nexport { MENU_BACK_BUTTON_PRIORITY, OVERLAY_BACK_BUTTON_PRIORITY, blockHardwareBackButton, startHardwareBackButton };\n"],
  "mappings": ";AAaA,IAAM,0BAA0B,MAAM;AAClC,WAAS,iBAAiB,cAAc,MAAM;AAAA,EAAE,CAAC;AACrD;AACA,IAAM,0BAA0B,MAAM;AAClC,QAAM,MAAM;AACZ,MAAI,OAAO;AACX,MAAI,iBAAiB,cAAc,MAAM;AACrC,QAAI,MAAM;AACN;AAAA,IACJ;AACA,QAAI,QAAQ;AACZ,QAAI,WAAW,CAAC;AAChB,UAAM,KAAK,IAAI,YAAY,iBAAiB;AAAA,MACxC,SAAS;AAAA,MACT,QAAQ;AAAA,QACJ,SAAS,UAAU,SAAS;AACxB,mBAAS,KAAK,EAAE,UAAU,SAAS,IAAI,QAAQ,CAAC;AAAA,QACpD;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,QAAI,cAAc,EAAE;AACpB,UAAM,gBAAgB,OAAO,oBAAoB;AAC7C,UAAI;AACA,YAAI,oBAAoB,QAAQ,oBAAoB,SAAS,SAAS,gBAAgB,SAAS;AAC3F,gBAAM,SAAS,gBAAgB,QAAQ,eAAe;AACtD,cAAI,UAAU,MAAM;AAChB,kBAAM;AAAA,UACV;AAAA,QACJ;AAAA,MACJ,SACO,GAAG;AACN,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ;AACA,UAAM,kBAAkB,MAAM;AAC1B,UAAI,SAAS,SAAS,GAAG;AACrB,YAAI,kBAAkB;AAAA,UAClB,UAAU,OAAO;AAAA,UACjB,SAAS,MAAM;AAAA,UACf,IAAI;AAAA,QACR;AACA,iBAAS,QAAQ,CAAC,YAAY;AAC1B,cAAI,QAAQ,YAAY,gBAAgB,UAAU;AAC9C,8BAAkB;AAAA,UACtB;AAAA,QACJ,CAAC;AACD,eAAO;AACP,mBAAW,SAAS,OAAO,CAAC,YAAY,QAAQ,OAAO,gBAAgB,EAAE;AACzE,sBAAc,eAAe,EAAE,KAAK,MAAO,OAAO,KAAM;AAAA,MAC5D;AAAA,IACJ;AACA,oBAAgB;AAAA,EACpB,CAAC;AACL;AACA,IAAM,+BAA+B;AACrC,IAAM,4BAA4B;",
  "names": []
}
